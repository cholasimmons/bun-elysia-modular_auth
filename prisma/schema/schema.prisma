generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native"]
  previewFeatures = ["multiSchema", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["logs", "users"]
}

model OAuth_Account {
  providerId      String    @id @unique @map("provider_id")
  providerUserId  String       @unique @map("provider_user_id")
  userId          String    @unique @map("user_id")
  user            User      @relation(fields: [userId], references: [id])

  @@index([providerId, providerUserId])
  @@map("oauth")
  @@schema("users")
}

model User {
  id             String    @id @unique
  firstname      String
  lastname       String
  username       String    @unique
  email          String    @unique
  emailVerified  Boolean   @default(false) @map("email_verified")
  phone          String?   @unique
  roles          Role[]    @default([GUEST])
  hashedPassword String    @map("hashed_password")
  isActive       Boolean   @default(true) @map("is_active")
  isComment      String?   @map("comment")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt() @map("updated_at")
  profile        Profile?  @relation("user_profile")
  profileId      String?   @unique
  oauth          OAuth_Account?
  authSession    Session[]

  @@index([id, email, createdAt(sort: Desc)])
  @@map("users")
  @@schema("users")
}

model Session {
  id            String   @id @unique
  userId        String   @map("user_id")
  fresh         Boolean  @default(false)
  expiresAt     DateTime @map("expires_at")
  activeExpires BigInt   @map("active_expires")
  host          String
  userAgentHash String?  @map("user_agent_hash")
  os            String?
  ipCountry     String?  @map("ip_country")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId(sort: Desc)])
  @@map("sessions")
  @@schema("users")
}

model EmailVerificationCode {
  id        Int      @id @unique @default(autoincrement())
  code      String
  userId    String   @unique @map("user_id")
  email     String
  expiresAt DateTime @map("expires_at")

  @@index([id, code])
  @@map("email_verification_codes")
  @@schema("users")
}

model PasswordResetToken {
  id        Int      @id @unique @default(autoincrement())
  tokenHash String   @unique @map("token_hash")
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")

  @@index([id])
  @@map("password_reset_tokens")
  @@schema("users")
}

model Profile {
  id           String       @id @unique @default(uuid())
  bio          String?
  userId       String?      @unique
  documentId   String       @map("document_id")
  documentType DocumentType @map("document_type")
  photoId      String?
  gender       Gender       @default(OTHER)
  firstname    String
  lastname     String
  email        String       @unique
  phone        String       @unique
  supportLevel Int          @default(0) @db.SmallInt
  isActive     Boolean      @default(true) @map("is_active")
  isComment    String?      @map("comment")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  user         User?        @relation("user_profile", fields: [userId], references: [id])

  @@map("profiles")
  @@schema("users")
}

model AutoEnrol {
  id           Int      @id @default(autoincrement())
  names        String?
  email        String   @unique
  phone        String?  @unique
  roles        Role[]
  supportLevel Int      @default(0) @db.SmallInt
  isActive     Boolean  @default(true) @map("is_active")
  isComment    String?  @map("comment")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("auto_enrols")
  @@schema("users")
}

enum Role {
  GUEST
  SUPPORT
  SUPERVISOR
  ADMIN

  @@schema("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@schema("users")
}

enum DocumentType {
  NRC
  PASSPORT

  @@schema("users")
}
