// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output = "../generated" // Required or Prisma will not generate in Docker images (Bun v1.27)
  binaryTargets = ["native"]
  // binaryTargets = ["native", "debian-openssl-1.1.x"] // for Linux
  // binaryTargets = ["native", "debian-openssl-3.0.x"] // for Ubuntu 22.04 / Debian
  // binaryTargets = ["native", "windows"]
  previewFeatures = ["multiSchema"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["users", "logs"]
}


// AUTH

model User {
  id                String        @id @unique
  firstname         String
  lastname          String
  google_id         String?        @unique
  apple_id          String?        @unique
  microsoft_id      String?        @unique
  facebook_id       String?        @unique
  email             String         @unique
  emailVerified     Boolean        @default(false) @map("email_verified")
  phone             String?        @unique
  roles             Role[]         @default([GUEST])
  profileId         String?       @unique
  profile           Profile?      @relation("user_profile")
  authSession       Session[]
  
  hashedPassword    String        @map("hashed_password") 

  isActive          Boolean       @default(true) @map("is_active")
  isComment         String?       @map("comment") // Explain why Profile is inactive
  createdAt         DateTime      @default(now()) @map("created_at")

  @@index([id, email, createdAt(sort: Desc)])
  @@map("users")
  @@schema("users")
}

model Session {
  id              String      @id @unique
  userId          String      @map("user_id")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  fresh           Boolean     @default(false)
  expiresAt       DateTime    @map("expires_at")
  activeExpires   BigInt      @map("active_expires")
  host            String
  userAgentHash   String?     @map("user_agent_hash")
  os              String?
  ipCountry       String?     @map("ip_country")
  createdAt       DateTime    @default(now()) @map("created_at")
  
  @@index([userId(sort: Desc)])
  @@map("sessions")
  @@schema("users")
}

model EmailVerificationCode {
  id            Int           @id @default(autoincrement()) @unique
  code          String
  userId        String        @unique @map("user_id")
  email         String
  expiresAt     DateTime      @map("expires_at")

  @@index([id, code])
  @@map("email_verification_codes")
  @@schema("users")
}

model PasswordResetToken {
  id            Int           @id @default(autoincrement()) @unique
  tokenHash     String        @unique @map("token_hash")
  userId        String        @map("user_id")
  expiresAt     DateTime      @map("expires_at")

  @@index([id])
  @@map("password_reset_tokens")
  @@schema("users")
}


model Profile {
  id                String        @id @default(uuid()) @unique
  bio               String?
  userId            String?        @unique
  user              User?          @relation("user_profile", fields: [userId], references: [id], onDelete: SetNull)
  documentId        String        @map("document_id") // NRC / Passport ID  
  documentType      DocumentType  @map("document_type")
  photoId           String?
  gender            Gender        @default(OTHER)

  firstname         String
  lastname          String
  email             String         @unique
  phone             String         @unique

  supportLevel      Int           @default(0) @db.SmallInt

  isActive          Boolean       @default(true) @map("is_active")
  isComment         String?       @map("comment") // Explain why Profile is inactive
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  @@map("profiles")
  @@schema("users")
}

model AutoEnrol {
  id                Int           @id @default(autoincrement())
  names             String?
  email             String        @unique
  phone             String?       @unique
  roles             Role[]
  supportLevel      Int           @default(0) @db.SmallInt

  isActive          Boolean       @default(true) @map("is_active")
  isComment         String?       @map("comment") // Explain why Profile is inactive
  createdAt         DateTime      @default(now()) @map("created_at")

  @@map("auto_enrols")
  @@schema("users")
}


// ENUMS

enum Role {
  GUEST // Default User
  SUPPORT // system customer service
  SUPERVISOR // overall manager
  ADMIN // system master

  @@schema("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@schema("users")
}

enum DocumentType {
  NRC
  PASSPORT

  @@schema("users")
}